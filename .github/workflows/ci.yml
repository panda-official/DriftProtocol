name: Build, test and publish
on:
  push:
    branches: [ master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, develop ]

env:
  CONAN_USER_HOME: /home/runner/
  PROTOC: ./bin/protoc

jobs:
  cpp-build:
    name: "Test C++ generation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install conan
        run: pip3 install conan

      - name: Build package
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release  ..
          cmake --build .

  cpp-conan:
    needs: [ cpp-build ]
    name: "Build and upload conan package"
    runs-on: ubuntu-latest
    if: ${{ (github.ref == 'refs/heads/develop') || (startsWith(github.event.ref, 'refs/tags/v')) }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install conan
        run: pip3 install conan

      - name: Create profile
        run: |
          cd conan
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Build package for stable channel
        if: github.ref_type == 'tag'
        run: |
          cd conan
          CONAN_SOURCE_DIR=`pwd`/.. conan create . drift/stable
      - name: Build package for develop channel
        if: github.ref_type == 'branch'
        run: |
          cd conan
          CONAN_SOURCE_DIR=`pwd`/.. conan create . drift/develop
      - name: Upload package
        run: |
          conan remote add panda https://conan.panda.technology/artifactory/api/conan/drift
          conan user -p ${{secrets.CONAN_PASSWORD}} -r panda --skip-auth ${{secrets.CONAN_LOGIN_USERNAME}}
          conan upload wavelet_buffer --all --confirm --remote=panda
      - name: Cache .conan directory
        uses: actions/cache@v3
        with:
          path: /home/runner/.conan
          key: conan-cache

  py-install-protoc:
    runs-on: ubuntu-latest
    name: "Install compatible Protobuf compiler"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: "Parse protobuf version and dowload protoc"
        run: |
          apt update && apt install -y wget unzip
          export PROTO_VERSION=`cat setup.py | grep PROTOBUF_VERSION | grep -Po "((\d+\.)+\d+)"`

          wget -O protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v${PROTO_VERSION}/protoc-${PROTO_VERSION}-linux-x86_64.zip
          unzip protoc.zip
          chmod +x ${PWD}/bin/
          ${PWD}/bin/protoc --version

      - uses: actions/upload-artifact@master
        with:
          name: protoc
          path: ./bin/

  py-format:
    runs-on: ubuntu-latest
    name: "Check PEP-8"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Update pip
        run: python3 -m pip install --no-cache --upgrade pip

      - name: Install dependencies
        run: pip3 install -r extra_requirements.txt

      - name: Check PEP8 with black
        run: black . --check

  py-pip:
    name: "Build PIP package"
    needs: [ py-format, py-install-protoc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@master
        with:
          name: protoc
          path: ./bin/

      - name: Make protoc executable
        run: chmod +x ${PROTOC}

      - name: Build package
        run: |
          python3 setup.py egg_info
          python3 setup.py bdist_wheel


      - name: Build package
        run: python3 setup.py bdist_wheel

      - uses: actions/upload-artifact@master
        with:
          name: package
          path: ./dist

  py-lint:
    name: "Lint PIP package"
    needs: [ py-pip ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@master
        with:
          name: package
          path: ./dist

      - name: Install package
        run: pip3 install ./dist/*

      - name: Install dependencies
        run: pip3 install -r extra_requirements.txt

      - name: Run Pylint
        run: pylint  tests/


  py-test:
    name: "Test PIP package"
    needs: [ py-pip ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@master
        with:
          name: package
          path: ./dist

      - name: Install package
        run: pip3 install ./dist/*

      - name: Install dependencies
        run: pip3 install -r extra_requirements.txt

      - name: Run Pytest
        run: pytest tests/
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v3
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install dependencies
#        run: |
#          sudo apt-get install libopenblas-dev
#          sudo apt-get install libjpeg-dev
#          sudo apt-get install nlohmann-json3-dev
#          git clone https://bitbucket.org/blaze-lib/blaze.git --depth=1 --branch=v3.8 && cd blaze && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ . && sudo make install
#          git clone https://github.com/USCiLab/cereal --depth=1 --branch=v1.3.2 && cd cereal && cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ -DJUST_INSTALL_CEREAL=ON . && sudo make install
#      - name: Build and install
#        run: |
#          cd python
#          pip install --verbose .[test]
#      - name: Test
#        run: |
#          cd python
#          pytest tests
#  build_sdist:
#    name: Build SDist
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Build SDist
#        run: |
#          cd python
#          pipx run build --sdist
#      - name: Check metadata
#        run: |
#          cd python
#          pipx run twine check dist/*
#      - uses: actions/upload-artifact@v2
#        with:
#          path: python/dist/*.tar.gz
#
#  build_wheels:
#    name: Wheels on ${{ matrix.os }}
#    #needs: [pip]
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ ubuntu-latest ]
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Install cibuildwheel
#        run: python -m pip install cibuildwheel==2.6.1
#
#      - name: Build wheels
#        run: |
#          python -m cibuildwheel --output-dir wheelhouse python
#      - name: Verify clean directory
#        run: |
#          cd python
#          git diff --exit-code
#        shell: bash
#
#      - name: Upload wheels
#        uses: actions/upload-artifact@v2
#        with:
#          path: wheelhouse/*.whl
#
#  upload_all:
#    name: Upload if release
#    needs: [ build_wheels, build_sdist ]
#    runs-on: ubuntu-latest
#    #if: github.event_name == 'release' && github.event.action == 'published'
#    if: ${{ (github.ref == 'refs/heads/develop') || (startsWith(github.event.ref, 'refs/tags/v')) }}
#
#    steps:
#      - uses: actions/setup-python@v2
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: artifact
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@v1.5.0
#        with:
#          user: ${{ secrets.PYPI_USERNAME }}
#          password: ${{ secrets.PYPI_PASSWORD }}
#          repository_url: https://pypi.panda.technology
#
